// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ptu_state.proto

#ifndef PROTOBUF_ptu_5fstate_2eproto__INCLUDED
#define PROTOBUF_ptu_5fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ptu_5fstate_2eproto();
void protobuf_AssignDesc_ptu_5fstate_2eproto();
void protobuf_ShutdownFile_ptu_5fstate_2eproto();

class AngularVelocity;
class Degrees;
class PtuState;

// ===================================================================

class Degrees : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Degrees) */ {
 public:
  Degrees();
  virtual ~Degrees();

  Degrees(const Degrees& from);

  inline Degrees& operator=(const Degrees& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Degrees& default_instance();

  void Swap(Degrees* other);

  // implements Message ----------------------------------------------

  inline Degrees* New() const { return New(NULL); }

  Degrees* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Degrees& from);
  void MergeFrom(const Degrees& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Degrees* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double deg = 1;
  void clear_deg();
  static const int kDegFieldNumber = 1;
  double deg() const;
  void set_deg(double value);

  // @@protoc_insertion_point(class_scope:Degrees)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double deg_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ptu_5fstate_2eproto();
  friend void protobuf_AssignDesc_ptu_5fstate_2eproto();
  friend void protobuf_ShutdownFile_ptu_5fstate_2eproto();

  void InitAsDefaultInstance();
  static Degrees* default_instance_;
};
// -------------------------------------------------------------------

class AngularVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AngularVelocity) */ {
 public:
  AngularVelocity();
  virtual ~AngularVelocity();

  AngularVelocity(const AngularVelocity& from);

  inline AngularVelocity& operator=(const AngularVelocity& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AngularVelocity& default_instance();

  void Swap(AngularVelocity* other);

  // implements Message ----------------------------------------------

  inline AngularVelocity* New() const { return New(NULL); }

  AngularVelocity* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AngularVelocity& from);
  void MergeFrom(const AngularVelocity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AngularVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double deg_sec = 1;
  void clear_deg_sec();
  static const int kDegSecFieldNumber = 1;
  double deg_sec() const;
  void set_deg_sec(double value);

  // @@protoc_insertion_point(class_scope:AngularVelocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double deg_sec_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ptu_5fstate_2eproto();
  friend void protobuf_AssignDesc_ptu_5fstate_2eproto();
  friend void protobuf_ShutdownFile_ptu_5fstate_2eproto();

  void InitAsDefaultInstance();
  static AngularVelocity* default_instance_;
};
// -------------------------------------------------------------------

class PtuState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PtuState) */ {
 public:
  PtuState();
  virtual ~PtuState();

  PtuState(const PtuState& from);

  inline PtuState& operator=(const PtuState& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PtuState& default_instance();

  void Swap(PtuState* other);

  // implements Message ----------------------------------------------

  inline PtuState* New() const { return New(NULL); }

  PtuState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PtuState& from);
  void MergeFrom(const PtuState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PtuState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Degrees pan_position = 1;
  bool has_pan_position() const;
  void clear_pan_position();
  static const int kPanPositionFieldNumber = 1;
  const ::Degrees& pan_position() const;
  ::Degrees* mutable_pan_position();
  ::Degrees* release_pan_position();
  void set_allocated_pan_position(::Degrees* pan_position);

  // optional .AngularVelocity pan_velocity = 2;
  bool has_pan_velocity() const;
  void clear_pan_velocity();
  static const int kPanVelocityFieldNumber = 2;
  const ::AngularVelocity& pan_velocity() const;
  ::AngularVelocity* mutable_pan_velocity();
  ::AngularVelocity* release_pan_velocity();
  void set_allocated_pan_velocity(::AngularVelocity* pan_velocity);

  // optional .Degrees tilt_position = 3;
  bool has_tilt_position() const;
  void clear_tilt_position();
  static const int kTiltPositionFieldNumber = 3;
  const ::Degrees& tilt_position() const;
  ::Degrees* mutable_tilt_position();
  ::Degrees* release_tilt_position();
  void set_allocated_tilt_position(::Degrees* tilt_position);

  // optional .AngularVelocity tilt_velocity = 4;
  bool has_tilt_velocity() const;
  void clear_tilt_velocity();
  static const int kTiltVelocityFieldNumber = 4;
  const ::AngularVelocity& tilt_velocity() const;
  ::AngularVelocity* mutable_tilt_velocity();
  ::AngularVelocity* release_tilt_velocity();
  void set_allocated_tilt_velocity(::AngularVelocity* tilt_velocity);

  // optional uint64 timestamp_ms = 5;
  void clear_timestamp_ms();
  static const int kTimestampMsFieldNumber = 5;
  ::google::protobuf::uint64 timestamp_ms() const;
  void set_timestamp_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:PtuState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::Degrees* pan_position_;
  ::AngularVelocity* pan_velocity_;
  ::Degrees* tilt_position_;
  ::AngularVelocity* tilt_velocity_;
  ::google::protobuf::uint64 timestamp_ms_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ptu_5fstate_2eproto();
  friend void protobuf_AssignDesc_ptu_5fstate_2eproto();
  friend void protobuf_ShutdownFile_ptu_5fstate_2eproto();

  void InitAsDefaultInstance();
  static PtuState* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Degrees

// optional double deg = 1;
inline void Degrees::clear_deg() {
  deg_ = 0;
}
inline double Degrees::deg() const {
  // @@protoc_insertion_point(field_get:Degrees.deg)
  return deg_;
}
inline void Degrees::set_deg(double value) {
  
  deg_ = value;
  // @@protoc_insertion_point(field_set:Degrees.deg)
}

// -------------------------------------------------------------------

// AngularVelocity

// optional double deg_sec = 1;
inline void AngularVelocity::clear_deg_sec() {
  deg_sec_ = 0;
}
inline double AngularVelocity::deg_sec() const {
  // @@protoc_insertion_point(field_get:AngularVelocity.deg_sec)
  return deg_sec_;
}
inline void AngularVelocity::set_deg_sec(double value) {
  
  deg_sec_ = value;
  // @@protoc_insertion_point(field_set:AngularVelocity.deg_sec)
}

// -------------------------------------------------------------------

// PtuState

// optional .Degrees pan_position = 1;
inline bool PtuState::has_pan_position() const {
  return !_is_default_instance_ && pan_position_ != NULL;
}
inline void PtuState::clear_pan_position() {
  if (GetArenaNoVirtual() == NULL && pan_position_ != NULL) delete pan_position_;
  pan_position_ = NULL;
}
inline const ::Degrees& PtuState::pan_position() const {
  // @@protoc_insertion_point(field_get:PtuState.pan_position)
  return pan_position_ != NULL ? *pan_position_ : *default_instance_->pan_position_;
}
inline ::Degrees* PtuState::mutable_pan_position() {
  
  if (pan_position_ == NULL) {
    pan_position_ = new ::Degrees;
  }
  // @@protoc_insertion_point(field_mutable:PtuState.pan_position)
  return pan_position_;
}
inline ::Degrees* PtuState::release_pan_position() {
  // @@protoc_insertion_point(field_release:PtuState.pan_position)
  
  ::Degrees* temp = pan_position_;
  pan_position_ = NULL;
  return temp;
}
inline void PtuState::set_allocated_pan_position(::Degrees* pan_position) {
  delete pan_position_;
  pan_position_ = pan_position;
  if (pan_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PtuState.pan_position)
}

// optional .AngularVelocity pan_velocity = 2;
inline bool PtuState::has_pan_velocity() const {
  return !_is_default_instance_ && pan_velocity_ != NULL;
}
inline void PtuState::clear_pan_velocity() {
  if (GetArenaNoVirtual() == NULL && pan_velocity_ != NULL) delete pan_velocity_;
  pan_velocity_ = NULL;
}
inline const ::AngularVelocity& PtuState::pan_velocity() const {
  // @@protoc_insertion_point(field_get:PtuState.pan_velocity)
  return pan_velocity_ != NULL ? *pan_velocity_ : *default_instance_->pan_velocity_;
}
inline ::AngularVelocity* PtuState::mutable_pan_velocity() {
  
  if (pan_velocity_ == NULL) {
    pan_velocity_ = new ::AngularVelocity;
  }
  // @@protoc_insertion_point(field_mutable:PtuState.pan_velocity)
  return pan_velocity_;
}
inline ::AngularVelocity* PtuState::release_pan_velocity() {
  // @@protoc_insertion_point(field_release:PtuState.pan_velocity)
  
  ::AngularVelocity* temp = pan_velocity_;
  pan_velocity_ = NULL;
  return temp;
}
inline void PtuState::set_allocated_pan_velocity(::AngularVelocity* pan_velocity) {
  delete pan_velocity_;
  pan_velocity_ = pan_velocity;
  if (pan_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PtuState.pan_velocity)
}

// optional .Degrees tilt_position = 3;
inline bool PtuState::has_tilt_position() const {
  return !_is_default_instance_ && tilt_position_ != NULL;
}
inline void PtuState::clear_tilt_position() {
  if (GetArenaNoVirtual() == NULL && tilt_position_ != NULL) delete tilt_position_;
  tilt_position_ = NULL;
}
inline const ::Degrees& PtuState::tilt_position() const {
  // @@protoc_insertion_point(field_get:PtuState.tilt_position)
  return tilt_position_ != NULL ? *tilt_position_ : *default_instance_->tilt_position_;
}
inline ::Degrees* PtuState::mutable_tilt_position() {
  
  if (tilt_position_ == NULL) {
    tilt_position_ = new ::Degrees;
  }
  // @@protoc_insertion_point(field_mutable:PtuState.tilt_position)
  return tilt_position_;
}
inline ::Degrees* PtuState::release_tilt_position() {
  // @@protoc_insertion_point(field_release:PtuState.tilt_position)
  
  ::Degrees* temp = tilt_position_;
  tilt_position_ = NULL;
  return temp;
}
inline void PtuState::set_allocated_tilt_position(::Degrees* tilt_position) {
  delete tilt_position_;
  tilt_position_ = tilt_position;
  if (tilt_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PtuState.tilt_position)
}

// optional .AngularVelocity tilt_velocity = 4;
inline bool PtuState::has_tilt_velocity() const {
  return !_is_default_instance_ && tilt_velocity_ != NULL;
}
inline void PtuState::clear_tilt_velocity() {
  if (GetArenaNoVirtual() == NULL && tilt_velocity_ != NULL) delete tilt_velocity_;
  tilt_velocity_ = NULL;
}
inline const ::AngularVelocity& PtuState::tilt_velocity() const {
  // @@protoc_insertion_point(field_get:PtuState.tilt_velocity)
  return tilt_velocity_ != NULL ? *tilt_velocity_ : *default_instance_->tilt_velocity_;
}
inline ::AngularVelocity* PtuState::mutable_tilt_velocity() {
  
  if (tilt_velocity_ == NULL) {
    tilt_velocity_ = new ::AngularVelocity;
  }
  // @@protoc_insertion_point(field_mutable:PtuState.tilt_velocity)
  return tilt_velocity_;
}
inline ::AngularVelocity* PtuState::release_tilt_velocity() {
  // @@protoc_insertion_point(field_release:PtuState.tilt_velocity)
  
  ::AngularVelocity* temp = tilt_velocity_;
  tilt_velocity_ = NULL;
  return temp;
}
inline void PtuState::set_allocated_tilt_velocity(::AngularVelocity* tilt_velocity) {
  delete tilt_velocity_;
  tilt_velocity_ = tilt_velocity;
  if (tilt_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:PtuState.tilt_velocity)
}

// optional uint64 timestamp_ms = 5;
inline void PtuState::clear_timestamp_ms() {
  timestamp_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PtuState::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:PtuState.timestamp_ms)
  return timestamp_ms_;
}
inline void PtuState::set_timestamp_ms(::google::protobuf::uint64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:PtuState.timestamp_ms)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ptu_5fstate_2eproto__INCLUDED
