// Generated by gencpp from file driver/filtered_msg.msg
// DO NOT EDIT!


#ifndef DRIVER_MESSAGE_FILTERED_MSG_H
#define DRIVER_MESSAGE_FILTERED_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace driver
{
template <class ContainerAllocator>
struct filtered_msg_
{
  typedef filtered_msg_<ContainerAllocator> Type;

  filtered_msg_()
    : time(0.0)
    , pan_position_filtered(0.0)
    , tilt_position_filtered(0.0)  {
    }
  filtered_msg_(const ContainerAllocator& _alloc)
    : time(0.0)
    , pan_position_filtered(0.0)
    , tilt_position_filtered(0.0)  {
  (void)_alloc;
    }



   typedef float _time_type;
  _time_type time;

   typedef float _pan_position_filtered_type;
  _pan_position_filtered_type pan_position_filtered;

   typedef float _tilt_position_filtered_type;
  _tilt_position_filtered_type tilt_position_filtered;





  typedef boost::shared_ptr< ::driver::filtered_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::driver::filtered_msg_<ContainerAllocator> const> ConstPtr;

}; // struct filtered_msg_

typedef ::driver::filtered_msg_<std::allocator<void> > filtered_msg;

typedef boost::shared_ptr< ::driver::filtered_msg > filtered_msgPtr;
typedef boost::shared_ptr< ::driver::filtered_msg const> filtered_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::driver::filtered_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::driver::filtered_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::driver::filtered_msg_<ContainerAllocator1> & lhs, const ::driver::filtered_msg_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.pan_position_filtered == rhs.pan_position_filtered &&
    lhs.tilt_position_filtered == rhs.tilt_position_filtered;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::driver::filtered_msg_<ContainerAllocator1> & lhs, const ::driver::filtered_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::driver::filtered_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::driver::filtered_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver::filtered_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::driver::filtered_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver::filtered_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::driver::filtered_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::driver::filtered_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4fe1e0247d2b0d4577130ca123fce728";
  }

  static const char* value(const ::driver::filtered_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4fe1e0247d2b0d45ULL;
  static const uint64_t static_value2 = 0x77130ca123fce728ULL;
};

template<class ContainerAllocator>
struct DataType< ::driver::filtered_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "driver/filtered_msg";
  }

  static const char* value(const ::driver::filtered_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::driver::filtered_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time\n"
"float32 pan_position_filtered\n"
"float32 tilt_position_filtered\n"
;
  }

  static const char* value(const ::driver::filtered_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::driver::filtered_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.pan_position_filtered);
      stream.next(m.tilt_position_filtered);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct filtered_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::driver::filtered_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::driver::filtered_msg_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "pan_position_filtered: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position_filtered);
    s << indent << "tilt_position_filtered: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position_filtered);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRIVER_MESSAGE_FILTERED_MSG_H
