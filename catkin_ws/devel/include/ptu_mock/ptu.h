// Generated by gencpp from file ptu_mock/ptu.msg
// DO NOT EDIT!


#ifndef PTU_MOCK_MESSAGE_PTU_H
#define PTU_MOCK_MESSAGE_PTU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ptu_mock
{
template <class ContainerAllocator>
struct ptu_
{
  typedef ptu_<ContainerAllocator> Type;

  ptu_()
    : time(0.0)
    , pan_position(0.0)
    , tilt_position(0.0)
    , pan_velocity(0.0)
    , tilt_velocity(0.0)  {
    }
  ptu_(const ContainerAllocator& _alloc)
    : time(0.0)
    , pan_position(0.0)
    , tilt_position(0.0)
    , pan_velocity(0.0)
    , tilt_velocity(0.0)  {
  (void)_alloc;
    }



   typedef float _time_type;
  _time_type time;

   typedef float _pan_position_type;
  _pan_position_type pan_position;

   typedef float _tilt_position_type;
  _tilt_position_type tilt_position;

   typedef float _pan_velocity_type;
  _pan_velocity_type pan_velocity;

   typedef float _tilt_velocity_type;
  _tilt_velocity_type tilt_velocity;





  typedef boost::shared_ptr< ::ptu_mock::ptu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ptu_mock::ptu_<ContainerAllocator> const> ConstPtr;

}; // struct ptu_

typedef ::ptu_mock::ptu_<std::allocator<void> > ptu;

typedef boost::shared_ptr< ::ptu_mock::ptu > ptuPtr;
typedef boost::shared_ptr< ::ptu_mock::ptu const> ptuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ptu_mock::ptu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ptu_mock::ptu_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ptu_mock::ptu_<ContainerAllocator1> & lhs, const ::ptu_mock::ptu_<ContainerAllocator2> & rhs)
{
  return lhs.time == rhs.time &&
    lhs.pan_position == rhs.pan_position &&
    lhs.tilt_position == rhs.tilt_position &&
    lhs.pan_velocity == rhs.pan_velocity &&
    lhs.tilt_velocity == rhs.tilt_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ptu_mock::ptu_<ContainerAllocator1> & lhs, const ::ptu_mock::ptu_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ptu_mock

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ptu_mock::ptu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ptu_mock::ptu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptu_mock::ptu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ptu_mock::ptu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptu_mock::ptu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ptu_mock::ptu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ptu_mock::ptu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae7540ae1ead164147af9ba5d328fb9c";
  }

  static const char* value(const ::ptu_mock::ptu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae7540ae1ead1641ULL;
  static const uint64_t static_value2 = 0x47af9ba5d328fb9cULL;
};

template<class ContainerAllocator>
struct DataType< ::ptu_mock::ptu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ptu_mock/ptu";
  }

  static const char* value(const ::ptu_mock::ptu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ptu_mock::ptu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time\n"
"float32 pan_position\n"
"float32 tilt_position\n"
"float32 pan_velocity\n"
"float32 tilt_velocity\n"
;
  }

  static const char* value(const ::ptu_mock::ptu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ptu_mock::ptu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.pan_position);
      stream.next(m.tilt_position);
      stream.next(m.pan_velocity);
      stream.next(m.tilt_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ptu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ptu_mock::ptu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ptu_mock::ptu_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "pan_position: ";
    Printer<float>::stream(s, indent + "  ", v.pan_position);
    s << indent << "tilt_position: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_position);
    s << indent << "pan_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.pan_velocity);
    s << indent << "tilt_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.tilt_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PTU_MOCK_MESSAGE_PTU_H
